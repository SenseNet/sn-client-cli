{"version":3,"file":"snconfigreader.js","sourceRoot":"","sources":["../../../src/utils/snconfig/snconfigreader.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,gCAA6B;AAC7B,yDAAsD;AACtD,uEAAoE;AACpE,mDAAgD;AAEhD;;GAEG;AACH;IAMI;;;OAGG;IACH,YAAoB,gBAAwB;QAAxB,qBAAgB,GAAhB,gBAAgB,CAAQ;QAR3B,mBAAc,GAAW,cAAc,CAAC;QAElD,WAAM,GAAkB,IAAI,6BAAa,EAAE,CAAC;IAMH,CAAC;IAEjD;;;;OAIG;IACU,cAAc,CAAC,WAAmB,IAAI,CAAC,cAAc;;YAC9D,IAAI,GAAkB,CAAC;YACvB,IAAI,CAAC;gBACD,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC;YAC/D,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,cAAc,mCAAmC,CAAC,CAAC;gBAC3E,GAAG,GAAG,IAAI,6BAAa,EAAE,CAAC;YAC9B,CAAC;YACD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;KAAA;IAED;;;;;OAKG;IACU,aAAa,CAAgC,GAAG,cAAmB;;YAC5E,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,cAAc,CAAC,CAAC,CAAC;gBACrC,MAAM,UAAU,GAAG,iDAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAEhD,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,GAAG,mCAAgB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBACrF,MAAM,KAAK,CAAC,UAAU,SAAS,oCAAoC,CAAC,CAAC;gBACzE,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC1B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC;wBAC7B,CAAC,UAAU,CAAC,QAAQ,GAAG,mCAAgB,CAAC,gBAAgB,CAAC;;gCAErD,MAAM,SAAG,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC;4BAC5C,MAAM,SAAG,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBACrD,CAAC;YACL,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;KAAA;IAED;;;OAGG;IACI,cAAc,CAAC,SAAiC;QACnD,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AAlED,wCAkEC","sourcesContent":["import * as Path from 'path';\r\nimport { Ask } from '../ask';\r\nimport { SnConfigBehavior } from \"./snconfigbehavior\";\r\nimport { SnConfigFieldModelStore } from \"./snconfigfieldmodelstore\";\r\nimport { SnConfigModel } from \"./snconfigmodel\";\r\n\r\n/**\r\n * This class reads, verifies and extends a configuration file from the specified project directory.\r\n */\r\nexport class SnConfigReader {\r\n\r\n    private readonly SN_CONFIG_NAME: string = 'sn.config.js';\r\n\r\n    public Config: SnConfigModel = new SnConfigModel();\r\n\r\n    /**\r\n     * @constructs SnConfigReader\r\n     * @param projectDirectory {string} The directory to look sn.config.js for\r\n     */\r\n    constructor(private projectDirectory: string) { }\r\n\r\n    /**\r\n     * Reads an sn.config.js file from the project directory, warns the user if there is no sn.config.js available\r\n     * @returns {Promise<any>} An awaitable promise that will be resolved when the\r\n     * reading is completed or the new Config model is constructed.\r\n     */\r\n    public async ReadConfigFile(fileName: string = this.SN_CONFIG_NAME): Promise<any> {\r\n        let cfg: SnConfigModel;\r\n        try {\r\n            cfg = require(this.projectDirectory + Path.sep + fileName);\r\n        } catch (error) {\r\n            console.log(`No '${this.SN_CONFIG_NAME}' file found in the project root.`);\r\n            cfg = new SnConfigModel();\r\n        }\r\n        this.Config = cfg;\r\n    }\r\n\r\n    /**\r\n     * Validates a specified option set and asks the user if there are some missing option values\r\n     * @param requiredValues The config fields to be provided and to be asked for\r\n     * @returns {Promise<Readonly<SnConfigModel>>} An awaitable promise with the\r\n     * readonly SnAdminConfigModel that will contain all specified values\r\n     */\r\n    public async ValidateAsync<K extends keyof SnConfigModel>(...requiredValues: K[]): Promise<Readonly<SnConfigModel>> {\r\n        for (const fieldName of requiredValues) {\r\n            const fieldModel = SnConfigFieldModelStore.Get(fieldName);\r\n            const value = this.Config[fieldModel.FieldName];\r\n\r\n            if (value && value.length && !(fieldModel.Behavior & SnConfigBehavior.AllowFromConfig)) {\r\n                throw Error(`Field '${fieldName}' is not allowed in snconfig file!`);\r\n            }\r\n\r\n            if (!value || !value.length) {\r\n                this.Config[fieldModel.FieldName] =\r\n                    (fieldModel.Behavior & SnConfigBehavior.HideConsoleInput)\r\n                        ?\r\n                        await Ask.PasswordAsync(fieldModel.Question) :\r\n                        await Ask.TextAsync(fieldModel.Question);\r\n            }\r\n        }\r\n\r\n        return this.Config;\r\n    }\r\n\r\n    /**\r\n     * Overrides the current config with the provided values\r\n     * @param newConfig {Partial<SnCnofigModel>} The new config values\r\n     */\r\n    public OverrideConfig(newConfig: Partial<SnConfigModel>) {\r\n        for (const field in newConfig) {\r\n            if (newConfig[field]) {\r\n                this.Config[field] = newConfig[field];\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}