{"version":3,"file":"ask.js","sourceRoot":"","sources":["../../src/utils/ask.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iCAAiC;AACjC,kEAA+D;AAC/D,gFAA6E;AAG7E;;GAEG;AACH;IAEI;;;;OAIG;IACI,MAAM,CAAO,SAAS,CAAC,QAAgB;;YAC1C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;KAAA;IAED;;;;OAIG;IACI,MAAM,CAAO,aAAa,CAAC,QAAgB;;YAC9C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC;KAAA;IAED;;;;OAIG;IACK,MAAM,CAAO,GAAG,CAAC,QAAgB,EAAE,OAAgB,KAAK;;YAC5D,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM;gBACvC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC;oBACP;wBACI,MAAM,EAAE,IAAI;wBACZ,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE,IAAI;qBACjB;iBACJ,EAAE,CAAC,GAAG,EAAE,GAAG;oBACR,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEM,MAAM,CAAC,kCAAkC,CAAC,SAAiB;QAC9D,MAAM,GAAG,GAAG,iDAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC;YACH,WAAW,EAAE,GAAG,CAAC,QAAQ;YACzB,MAAM,EAAE,GAAG,CAAC,QAAQ,GAAG,mCAAgB,CAAC,gBAAgB;YACxD,IAAI,EAAE,GAAG,CAAC,SAAS;SACtB,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,MAAM,CAAO,cAAc,CAAgC,GAAG,cAAmB;;YACpF,MAAM,CAAC,IAAI,OAAO,CAAyB,CAAC,OAAO,EAAE,MAAM;gBACvD,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;gBAC5E,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG;oBACzB,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;CACJ;AA9DD,kBA8DC","sourcesContent":["import * as Prompt from 'prompt';\r\nimport { SnConfigBehavior } from \"./snconfig/snconfigbehavior\";\r\nimport { SnConfigFieldModelStore } from './snconfig/snconfigfieldmodelstore';\r\nimport { SnConfigModel } from './snconfig/snconfigmodel';\r\n\r\n/**\r\n * This class is a wrapper for command-line data input in Node.Js console applications\r\n */\r\nexport class Ask {\r\n\r\n    /**\r\n     * Prompts a question to the console and awaits a text input. The typings will be displayed as a plain text.\r\n     * @param question {string} A question to be asked before reading the data\r\n     * @returns {Promise<string>} A promise that will be resolved when the user press ENTER key\r\n     */\r\n    public static async TextAsync(question: string): Promise<string> {\r\n        return Ask.Ask(question);\r\n    }\r\n\r\n    /**\r\n     * Prompts a question to the console and awaits a text input. The typing won't be displayed in the console.\r\n     * @param question {string} A question to be asked before reading the data\r\n     * @returns {Promise<string>} A promise that will be resolved when the user press ENTER key\r\n     */\r\n    public static async PasswordAsync(question: string): Promise<string> {\r\n        return Ask.Ask(question, true);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param question The string that will be displayed before the user input\r\n     * @param hide {boolean} Indicates if the user input needs to be hidden\r\n     */\r\n    private static async Ask(question: string, hide: boolean = false): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            Prompt.start();\r\n            Prompt.get([\r\n                {\r\n                    hidden: hide,\r\n                    name: question,\r\n                    required: true,\r\n                },\r\n            ], (err, res) => {\r\n                resolve(res[question]);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static createPromptQuestionFromConfigName(fieldName: string) {\r\n        const cfg = SnConfigFieldModelStore.Get(fieldName);\r\n        return {\r\n            description: cfg.Question,   // ??\r\n            hidden: cfg.Behavior | SnConfigBehavior.HideConsoleInput,\r\n            name: cfg.FieldName,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Asks about a list of provided config values\r\n     * @param missingConfigs {K[]} A keys from SnConfigModel's fields which has to be asked\r\n     */\r\n    public static async MissingConfigs<K extends keyof SnConfigModel>(...missingConfigs: K[]): Promise<Partial<SnConfigModel>> {\r\n        return new Promise<Partial<SnConfigModel>>((resolve, reject) => {\r\n            Prompt.start();\r\n            const configs = missingConfigs.map(this.createPromptQuestionFromConfigName);\r\n            Prompt.get(configs, (err, res) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}