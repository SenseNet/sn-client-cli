{"version":3,"file":"stage.js","sourceRoot":"","sources":["../../src/utils/stage.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,8BAA8B;AAC9B,6BAA6B;AAE7B,4CAA4C;AAC5C,oCAAoC;AAGpC,6BAA6B;AAE7B,MAAM,gBAAgB,GAAG,KAAK,CAAC;AAE/B;;;;;;;;;GASG;AACH;IAEI;;;OAGG;IACH,YAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAW,cAAc;QACrB,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,GAAG,gBAAgB,EAAE,CAAC;IACtE,CAAC;IAED;;;;OAIG;IACU,YAAY;;YACrB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;gBAClB,eAAe;gBACf,gBAAgB;gBAChB,gBAAgB;gBAChB,iBAAiB;aACpB,EAAE;gBACK,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;gBAC7B,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;aAC/B,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1C,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC;KAAA;IAEY,iBAAiB;;YAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;gBAClB,eAAe;gBACf,gBAAgB;gBAChB,gBAAgB;gBAChB,iBAAiB;aACpB,EAAE;gBACK,IAAI,EAAE,IAAI,CAAC,cAAc;gBACzB,GAAG,EAAE,IAAI,CAAC,cAAc;aAC3B,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YAC9C,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC;KAAA;IAED;;;OAGG;IACU,YAAY;;YACrB,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACxD,MAAM,IAAI,CAAC,gBAAgB,CAAC,+CAA+C,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAClG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;KAAA;IAEY,gBAAgB,CAAC,OAAe,EAAE,UAAkB;;YAC7D,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;gBAC/B,OAAO,CAAC,OAAO,EAAE;oBACb,GAAG,EAAE,UAAU;oBACf,SAAS,EAAE,CAAC;iBACf,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG;oBACR,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACN,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,EAAE,CAAC;oBACd,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAED;;OAEG;IACI,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACtD,CAAC;CACJ;AAnFD,sBAmFC","sourcesContent":["import * as Delete from 'del';\r\nimport * as Gulp from 'gulp';\r\nimport * as GulpMocha from 'gulp-mocha';\r\nimport * as Promisify from 'gulp-promisify';\r\nimport * as GulpRun from 'gulp-run';\r\nimport { PathHelper } from './pathhelper';\r\n\r\nimport * as Path from 'path';\r\n\r\nconst TEMP_FOLDER_NAME = 'tmp';\r\n\r\n/**\r\n * This class is used to handle the new incoming types from the repository in a transactional way.\r\n * Usage\r\n *  - make a clean environment (temp folder)\r\n *  - copy the existing client-related Typescript modules and test files (some of them will be overwritten the new ones from the repository)\r\n *  - build the module\r\n *  - run the unit tests\r\n *  - (if the build and the unit tests has been succeeded) copy the files back to the package root\r\n *  - clean up the temporary environment\r\n */\r\nexport class Stage {\r\n\r\n    /**\r\n     * @param paths {PathHelper} Contextual path options\r\n     * @constructs Stage\r\n     */\r\n    constructor(private paths: PathHelper) {\r\n        Promisify(Gulp);\r\n    }\r\n\r\n    /**\r\n     * @returns The absolute path of the Temporary folder\r\n     */\r\n    public get TempFolderPath(): string {\r\n        return `${this.paths.SnClientPath}${Path.sep}${TEMP_FOLDER_NAME}`;\r\n    }\r\n\r\n    /**\r\n     * Prepare the specified temporary folder\r\n     * - Cleans up if neccessary\r\n     * - Copies the existing Typescript source files and testss\r\n     */\r\n    public async PrepareAsync() {\r\n        this.Cleanup();\r\n        const task = Gulp.src([\r\n            `./src/**/*.ts`,\r\n            `./test/**/*.ts`,\r\n            `!./src/SN.d.ts`,\r\n            `./tsconfig.json`,\r\n        ], {\r\n                base: this.paths.SnClientPath,\r\n                cwd: this.paths.SnClientPath,\r\n            })\r\n            .pipe(Gulp.dest(this.TempFolderPath));\r\n        await task.resume();\r\n    }\r\n\r\n    public async UpdateModuleAsync() {\r\n        const task = Gulp.src([\r\n            `./src/**/*.ts`,\r\n            `./test/**/*.ts`,\r\n            `!./src/SN.d.ts`,\r\n            `./tsconfig.json`,\r\n        ], {\r\n                base: this.TempFolderPath,\r\n                cwd: this.TempFolderPath,\r\n            })\r\n            .pipe(Gulp.dest(this.paths.SnClientPath));\r\n        await task.resume();\r\n    }\r\n\r\n    /**\r\n     * Compiles the artifacts in the specified temp folder and runs the unit tests\r\n     * @throws {Error} if the build or the test has been failed\r\n     */\r\n    public async CompileAsync() {\r\n        await this.CallGulpRunAsync('tsc', this.TempFolderPath);\r\n        await this.CallGulpRunAsync('nyc mocha -p tsconfig.json dist/test/index.js', this.TempFolderPath);\r\n        await this.UpdateModuleAsync();\r\n        await this.Cleanup();\r\n    }\r\n\r\n    public async CallGulpRunAsync(command: string, workingDir: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            GulpRun(command, {\r\n                cwd: workingDir,\r\n                verbosity: 3,\r\n            }).exec((err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Cleans up (deletes) the specified temporary folder\r\n     */\r\n    public Cleanup() {\r\n        Delete.sync(this.TempFolderPath, { force: true });\r\n    }\r\n}\r\n"]}