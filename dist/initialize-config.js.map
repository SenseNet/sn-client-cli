{"version":3,"file":"initialize-config.js","sourceRoot":"","sources":["../src/initialize-config.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,+CAA4C;AAE5C;;GAEG;AACH,6BAA0C,cAA2B,yBAAW,CAAC,OAAO;;QACpF,OAAO,CAAC,GAAG,CAAC,+BAA+B,WAAW,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,iBAAiB,CAAC,CAAC;QACzG,IAAI,CAAC;YACD,MAAM,WAAW,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;YAChD,OAAO,CAAC,GAAG,CAAC,aAAa,WAAW,CAAC,UAAU,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;QAC9F,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;YAClE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;IACL,CAAC;CAAA;AATD,kDASC","sourcesContent":["import * as Path from 'path';\r\nimport { Initializer } from './initializer';\r\n\r\n/**\r\n * This function initializes a new 'sn.config.js' configuration file into an NPM package's root folder.\r\n */\r\nexport async function DoInitializeConfigs(initializer: Initializer = Initializer.Current) {\r\n    console.log(`Copying default config from ${initializer.PathHelper.SnCliPath}${Path.sep}sn.config.js...`);\r\n    try {\r\n        await initializer.Stage.InitializeConfigAsync();\r\n        console.log(`Copied to ${initializer.PathHelper.PackageRootPath}${Path.sep}sn.config.js`);\r\n    } catch (error) {\r\n        console.error('There was an error initializing the config file.');\r\n        console.error(error);\r\n    }\r\n}\r\n"]}