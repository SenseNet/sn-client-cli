{"version":3,"file":"sn-fetch-types.js","sourceRoot":"","sources":["../src/sn-fetch-types.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,kCAAkC;AAClC,6BAA6B;AAC7B,+CAA4C;AAC5C,+CAA4C;AAE5C;;;GAGG;AAEH,MAAM,yBAAyB,GAAG,kDAAkD,CAAC;AACrF;;QACI,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC1C,MAAM,yBAAW,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,MAAM,yBAAW,CAAC,cAAc,CAAC,aAAa,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QACpG,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,MAAM,IAAI,mBAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,yBAAyB,CAAC;aAC7E,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC;aACxC,gBAAgB,EAAE,CAAC;QACxB,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,GAAG,CAAC,YAAY,CAAC,yBAAW,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5E,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,MAAM,yBAAW,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;CAAA;AAhBD,oCAgBC","sourcesContent":["import * as AdmZip from 'adm-zip';\r\nimport * as Path from 'path';\r\nimport { Initializer } from './initializer';\r\nimport { Download } from \"./utils/download\";\r\n\r\n/**\r\n * Executeable node.js file for fetching / updating pre-generated\r\n *  Typescript proxy classes from a Sense/Net Content Repository\r\n */\r\n\r\nconst SN_REPOSITORY_URL_POSTFIX = '/Root/System/Schema/Metadata/TypeScript/meta.zip';\r\nexport async function DoFetchTypes() {\r\n    console.log('Sn-Fetch-Types starting...');\r\n    await Initializer.Stage.PrepareAsync();\r\n    console.log('Checking sn.config.js...');\r\n    const cfg = await Initializer.SnConfigReader.ValidateAsync('RepositoryUrl', 'UserName', 'Password');\r\n    console.log('Downloading type definitions...');\r\n    const zipBuffer = await new Download(cfg.RepositoryUrl, SN_REPOSITORY_URL_POSTFIX)\r\n        .Authenticate(cfg.UserName, cfg.Password)\r\n        .GetAsBufferAsync();\r\n    const zip = AdmZip(zipBuffer);\r\n    console.log('Download completed, extracting...');\r\n    zip.extractAllTo(Initializer.Stage.TempFolderPath + Path.sep + 'src', true);\r\n    console.log('Files extracted, running Build...');\r\n    await Initializer.Stage.CompileAsync();\r\n    console.log('All done.');\r\n    process.exit(0);\r\n}\r\n"]}