{"version":3,"file":"sn-fetch-types.js","sourceRoot":"","sources":["../src/sn-fetch-types.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,kCAAkC;AAClC,6BAA6B;AAC7B,+CAA4C;AAC5C,+CAA4C;AAE5C;;;GAGG;AACH,sBAAmC,cAA2B,yBAAW,CAAC,OAAO;;QAC7E,IAAI,CAAC;YACD,MAAM,yBAAyB,GAAG,kDAAkD,CAAC;YAErF,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAC1C,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxC,MAAM,GAAG,GAAG,MAAM,WAAW,CAAC,cAAc,CAAC,aAAa,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YACpG,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC/C,MAAM,SAAS,GAAG,MAAM,IAAI,mBAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,yBAAyB,CAAC;iBAC7E,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC;iBACxC,gBAAgB,EAAE,CAAC;YACxB,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YACjD,GAAG,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC;YAC5E,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YAEjD,MAAM,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAClF,MAAM,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,+CAA+C,EAAE,WAAW,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC5H,MAAM,WAAW,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAC5C,MAAM,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YAElC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC3D,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;IACL,CAAC;CAAA;AA1BD,oCA0BC","sourcesContent":["import * as AdmZip from 'adm-zip';\r\nimport * as Path from 'path';\r\nimport { Initializer } from './initializer';\r\nimport { Download } from \"./utils/download\";\r\n\r\n/**\r\n * Executeable node.js file for fetching / updating pre-generated\r\n *  Typescript proxy classes from a Sense/Net Content Repository\r\n */\r\nexport async function DoFetchTypes(initializer: Initializer = Initializer.Current) {\r\n    try {\r\n        const SN_REPOSITORY_URL_POSTFIX = '/Root/System/Schema/Metadata/TypeScript/meta.zip';\r\n\r\n        console.log('Sn-Fetch-Types starting...');\r\n        console.log('Checking sn.config.js...');\r\n        const cfg = await initializer.SnConfigReader.ValidateAsync('RepositoryUrl', 'UserName', 'Password');\r\n        console.log('Downloading type definitions...');\r\n        const zipBuffer = await new Download(cfg.RepositoryUrl, SN_REPOSITORY_URL_POSTFIX)\r\n            .Authenticate(cfg.UserName, cfg.Password)\r\n            .GetAsBufferAsync();\r\n        const zip = AdmZip(zipBuffer);\r\n        console.log('Download completed, extracting...');\r\n        zip.extractAllTo(initializer.Stage.TempFolderPath + Path.sep + 'src', true);\r\n        console.log('Files extracted, running Build...');\r\n\r\n        await initializer.Stage.CallGulpRunAsync('tsc', initializer.Stage.TempFolderPath);\r\n        await initializer.Stage.CallGulpRunAsync('nyc mocha -p tsconfig.json dist/test/index.js', initializer.Stage.TempFolderPath);\r\n        await initializer.Stage.UpdateModuleAsync();\r\n        await initializer.Stage.Cleanup();\r\n\r\n        console.log('All done.');\r\n    } catch (error) {\r\n        console.error('There was an error during fetching types.');\r\n        console.error(error);\r\n    }\r\n}\r\n"]}