{"version":3,"file":"download.js","sourceRoot":"","sources":["../../../src/utils/download.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAE7B;;GAEG;AACH;IAEI;;;;OAIG;IACH,YAAoB,IAAY,EAAU,IAAY;QAAlC,SAAI,GAAJ,IAAI,CAAQ;QAAU,SAAI,GAAJ,IAAI,CAAQ;QAGtD;;WAEG;QACK,YAAO,GAAQ,EAAE,CAAC;IAL1B,CAAC;IAOD;;;;OAIG;IACI,YAAY,CAAC,QAAgB,EAAE,QAAgB;QAClD,MAAM,IAAI,GAAG,QAAQ,GAAG,IAAI,MAAM,CAAC,GAAG,QAAQ,IAAI,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjF,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,gBAAgB;QACnB,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM;YACvC,IAAI,CAAC,GAAG,CAAC;gBACL,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;aAClB,EAAE,CAAC,QAA8B;gBAC9B,MAAM,IAAI,GAAG,EAAE,CAAC;gBAChB,MAAM,aAAa,GAAW,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC9E,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK;oBACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrB,CAAC,CAAC,CAAC;gBAEH,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE;oBACf,IAAI,GAAG,GAAG,CAAC,CAAC;oBACZ,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC;oBACzC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK;wBACf,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;wBACxB,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC;oBACxB,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,MAAM,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAvDD,4BAuDC","sourcesContent":["import * as Http from 'http';\r\n\r\n/**\r\n * This class represents a Download from a specified Sense/Net Repository\r\n */\r\nexport class Download {\r\n\r\n    /**\r\n     * @constructs Download\r\n     * @param host {string} The hostname for the specified Sense/Net repository\r\n     * @param path {string} The path to the download\r\n     */\r\n    constructor(private host: string, private path: string) {\r\n    }\r\n\r\n    /**\r\n     * The request headers to be send\r\n     */\r\n    private headers: any = {};\r\n\r\n    /**\r\n     * Sets up the Basic Authentication headers\r\n     * @param username {string} The username for the authentication\r\n     * @param password {string} The password for the authentication\r\n     */\r\n    public Authenticate(username: string, password: string): Download {\r\n        const auth = 'Basic ' + new Buffer(`${username}:${password}`).toString('base64');\r\n        this.headers.Authorization = auth;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Executes the download request, flatterns the data into a simple in-memory buffer\r\n     * @returns {Promise<Buffer>} An awaitable promise with the in-memory buffer\r\n     */\r\n    public GetAsBufferAsync(): Promise<Buffer> {\r\n        return new Promise<Buffer>((resolve, reject) => {\r\n            Http.get({\r\n                headers: this.headers,\r\n                host: this.host,\r\n                path: this.path,\r\n            }, (response: Http.IncomingMessage) => {\r\n                const data = [];\r\n                const contentLength: number = parseInt(response.headers['content-length'], 0);\r\n                response.on('data', (chunk) => {\r\n                    data.push(chunk);\r\n                });\r\n\r\n                response.on('end', () => {\r\n                    let pos = 0;\r\n                    const buffer = new Buffer(contentLength);\r\n                    data.forEach((chunk) => {\r\n                        chunk.copy(buffer, pos);\r\n                        pos += chunk.length;\r\n                    });\r\n                    resolve(buffer);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}