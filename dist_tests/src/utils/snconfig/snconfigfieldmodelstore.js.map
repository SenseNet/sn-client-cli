{"version":3,"file":"snconfigfieldmodelstore.js","sourceRoot":"","sources":["../../../../src/utils/snconfig/snconfigfieldmodelstore.ts"],"names":[],"mappings":";;AAAA,yDAAsD;AAGtD;;GAEG;AACH;IAOI;;;;OAIG;IACI,MAAM,CAAC,GAAG,CAAC,QAA4B;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,SAAS,QAAQ,CAAC,SAAS,gDAAgD,CAAC,CAAC;QACjG,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,GAAG,CAAC,SAAiB;QAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,uCAAuC,SAAS,GAAG,CAAC,CAAC;QACzE,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,QAAQ,CAAC,SAAiB;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,iBAAiB;QAC3B,MAAM,KAAK,GAAyB,EAAE,CAAC;QACvC,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,mCAAgB,CAAC,oBAAoB,CAAC,KAAK,mCAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC1H,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YAClC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;;AAnDD;;GAEG;AACY,6BAAK,GAAyB,EAAE,CAAC;AALpD,0DAsDC","sourcesContent":["import { SnConfigBehavior } from './snconfigbehavior';\r\nimport { SnConfigFieldModel } from './snconfigfieldmodel';\r\n\r\n/**\r\n * Class that stores the model data for the SnConfigModel's fields, it's values are, filled by the SnConfigField decorator.\r\n */\r\nexport class SnConfigFieldModelStore {\r\n\r\n    /**\r\n     * An array that contains the field definitions.\r\n     */\r\n    private static store: SnConfigFieldModel[] = [];\r\n\r\n    /**\r\n     * Adds a new model to the store\r\n     * @param newModel {SnConfigFieldModel} The field model to be added\r\n     * @throws error if a field with the same name already exists\r\n     */\r\n    public static Add(newModel: SnConfigFieldModel) {\r\n        if (this.Contains(newModel.FieldName)) {\r\n            throw new Error(`Field ${newModel.FieldName} for configuration model already in the store!`);\r\n        }\r\n        this.store[newModel.FieldName] = newModel;\r\n    }\r\n\r\n    /**\r\n     * Returns an entry for the specified field\r\n     * @param fieldName {string} The field's name to search for\r\n     * @throws error {error} if the store doesn't contain entry for the field.\r\n     */\r\n    public static Get(fieldName: string): SnConfigFieldModel {\r\n        const found = this.store[fieldName];\r\n        if (!found) {\r\n            throw new Error(`No entry found with the field name '${fieldName}'`);\r\n        }\r\n        return this.store[fieldName];\r\n    }\r\n\r\n    /**\r\n     * Checks if the store contains value with the specified field\r\n     * @param fieldName fieldName {string} The field's name to search for\r\n     */\r\n    public static Contains(fieldName: string): boolean {\r\n        const found = this.store[fieldName];\r\n        return found !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the fields which are available for command line option input\r\n     * @returns {SnCofigFieldModel[]} The listof the fields\r\n     */\r\n    public static GetCommandOptions(): SnConfigFieldModel[] {\r\n        const items: SnConfigFieldModel[] = [];\r\n        for (const field in this.store) {\r\n            if (field && (this.store[field].Behavior & SnConfigBehavior.AllowFromCommandLine) === SnConfigBehavior.AllowFromCommandLine) {\r\n                items.push(this.store[field]);\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n}\r\n"]}