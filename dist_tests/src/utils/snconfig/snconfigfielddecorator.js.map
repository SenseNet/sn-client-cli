{"version":3,"file":"snconfigfielddecorator.js","sourceRoot":"","sources":["../../../../src/utils/snconfig/snconfigfielddecorator.ts"],"names":[],"mappings":";;AACA,uEAAoE;AAEpE;;;;;GAKG;AACH,uBAA8B,KAAyB;IACnD,MAAM,CAAC,CAAC,MAAW,EAAE,YAAoB;QACrC,KAAK,CAAC,SAAS,GAAG,YAAY,CAAC;QAC/B,iDAAuB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC,CAAC;AACN,CAAC;AALD,sCAKC","sourcesContent":["import { SnConfigFieldModel, } from './snconfigfieldmodel';\r\nimport { SnConfigFieldModelStore } from './snconfigfieldmodelstore';\r\n\r\n/**\r\n * This function has to be used in the SnConfigModel class to provide additional metadata for the SnConfig fields\r\n * @param model {SnConfigFieldModel} The field model parameters\r\n * @returns {function(SnConfigModel)} A factory method which fills the SnConfigModelStore\r\n * with for the decorated field with the provided field model data\r\n */\r\nexport function SnConfigField(model: SnConfigFieldModel) {\r\n    return (target: any, propertyName: string) => {\r\n        model.FieldName = propertyName;\r\n        SnConfigFieldModelStore.Add(model);\r\n    };\r\n}\r\n"]}