{"version":3,"file":"SnConfigTests.js","sourceRoot":"","sources":["../../test/SnConfigTests.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6BAA6B;AAC7B,uDAA+C;AAE/C,6EAA0E;AAC1E,iFAA8E;AAC9E,2FAAwF;AAExF,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAG3B,IAAa,aAAa,GAA1B;IAGW,eAAe;QAClB,MAAM,UAAU,GAAG,IAAI,uCAAkB,EAAE,CAAC;QAC5C,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,mCAAgB,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IAGM,YAAY;QACf,MAAM,IAAI,GAAG,QAAQ,iDAAuB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAGM,cAAc;QACjB,MAAM,GAAG,GAAG,QAAQ,iDAAuB,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,mCAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9I,GAAG,EAAE,CAAC,CAAE,WAAW;QACnB,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAGM,gBAAgB;QACnB,MAAM,QAAQ,GAAG,iDAAuB,CAAC,iBAAiB,EAAE,CAAC;QAC7D,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO;YACrB,MAAM,SAAS,GAAG,CAAC,OAAO,CAAC,QAAQ,GAAG,mCAAgB,CAAC,oBAAoB,CAAC,KAAK,mCAAgB,CAAC,oBAAoB,CAAC;YACvH,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IAEP,CAAC;CAEJ,CAAA;AA5BG;IADC,uBAAI,CAAC,wEAAwE,CAAC;;;;oDAI9E;AAGD;IADC,uBAAI,CAAC,2EAA2E,CAAC;;;;iDAIjF;AAGD;IADC,uBAAI,CAAC,6FAA6F,CAAC;;;;mDAKnG;AAGD;IADC,uBAAI,CAAC,kFAAkF,CAAC;;;;qDAQxF;AA7BQ,aAAa;IADzB,wBAAK,CAAC,gBAAgB,CAAC;GACX,aAAa,CA+BzB;AA/BY,sCAAa","sourcesContent":["import * as Chai from 'chai';\r\nimport { suite, test } from 'mocha-typescript';\r\nimport { Download } from '../src/utils/download';\r\nimport { SnConfigBehavior } from \"../src/utils/snconfig/snconfigbehavior\";\r\nimport { SnConfigFieldModel } from \"../src/utils/snconfig/snconfigfieldmodel\";\r\nimport { SnConfigFieldModelStore } from \"../src/utils/snconfig/snconfigfieldmodelstore\";\r\n\r\nconst expect = Chai.expect;\r\n\r\n@suite('SnConfig Tests')\r\nexport class SnConfigTests {\r\n\r\n    @test('SnConfigFieldModel Should be constructed with SnConfigBehavior.Default')\r\n    public ConfigEntryCtor() {\r\n        const fieldModel = new SnConfigFieldModel();\r\n        expect(fieldModel.Behavior).to.be.eq(SnConfigBehavior.Default);\r\n    }\r\n\r\n    @test('SnConfigFieldModelStore Should throw error if entity isn\\'t in the store ')\r\n    public StoreMissing() {\r\n        const find = () => { SnConfigFieldModelStore.Get('exampleFieldName'); };\r\n        expect(find).to.throw(Error);\r\n    }\r\n\r\n    @test('SnConfigFieldModelStore Should throw an error if you try to add a field that already exists')\r\n    public StoreDuplicate() {\r\n        const add = () => { SnConfigFieldModelStore.Add({ FieldName: 'Example', Question: 'ExampleQuestion', Behavior: SnConfigBehavior.Default }); };\r\n        add();  // add once\r\n        expect(add).to.throw(Error);\r\n    }\r\n\r\n    @test('GetCommandOptions should return only commands that has AllowFromCommandLine flag')\r\n    public GetCmmandOptions() {\r\n        const commands = SnConfigFieldModelStore.GetCommandOptions();\r\n        commands.forEach((command) => {\r\n            const isAllowed = (command.Behavior & SnConfigBehavior.AllowFromCommandLine) === SnConfigBehavior.AllowFromCommandLine;\r\n            expect(isAllowed).to.eq(true);\r\n        });\r\n\r\n    }\r\n\r\n}\r\n"]}