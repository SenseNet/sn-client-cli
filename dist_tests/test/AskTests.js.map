{"version":3,"file":"AskTests.js","sourceRoot":"","sources":["../../test/AskTests.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6BAA6B;AAC7B,uDAA+C;AAC/C,0CAAuC;AAEvC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAG3B,IAAa,QAAQ,GAArB;IAGW,SAAS;QACZ,MAAM,OAAO,GAAG,SAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,yBAAyB,CAAC,CAAC;IACzE,CAAC;IAGM,aAAa;QAChB,MAAM,OAAO,GAAG,SAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAGM,wBAAwB;QAC3B,MAAM,CAAC,GAAG,SAAG,CAAC,kCAAkC,CAAC,eAAe,CAAC,CAAC;QAClE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;IAC7C,CAAC;IAGM,cAAc;QACjB,MAAM,OAAO,GAAG,SAAG,CAAC,cAAc,EAAE,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;CACJ,CAAA;AAtBG;IADC,uBAAI,CAAC,oCAAoC,CAAC;;;;yCAI1C;AAGD;IADC,uBAAI,CAAC,oCAAoC,CAAC;;;;6CAI1C;AAGD;IADC,uBAAI,CAAC,sDAAsD,CAAC;;;;wDAI5D;AAGD;IADC,uBAAI,CAAC,oCAAoC,CAAC;;;;8CAI1C;AAxBQ,QAAQ;IADpB,wBAAK,CAAC,WAAW,CAAC;GACN,QAAQ,CAyBpB;AAzBY,4BAAQ","sourcesContent":["import * as Chai from 'chai';\r\nimport { suite, test } from 'mocha-typescript';\r\nimport { Ask } from '../src/utils/ask';\r\n\r\nconst expect = Chai.expect;\r\n\r\n@suite('Ask Tests')\r\nexport class AskTests {\r\n\r\n    @test('should return an awaitable Promise')\r\n    public TextAsync() {\r\n        const promise = Ask.TextAsync('Text');\r\n        expect(promise).to.be.instanceOf(Promise, 'Should return a promise');\r\n    }\r\n\r\n    @test('should return an awaitable Promise')\r\n    public PasswordAsync() {\r\n        const promise = Ask.PasswordAsync('Password');\r\n        expect(promise).to.be.an.instanceOf(Promise);\r\n    }\r\n\r\n    @test('should create Prompt question from config field name')\r\n    public createQuestionFromConfig() {\r\n        const q = Ask.createPromptQuestionFromConfigName('RepositoryUrl');\r\n        expect(q.name).to.be.eq('RepositoryUrl');\r\n    }\r\n\r\n    @test('should return an awaitable Promise')\r\n    public MissingConfigs() {\r\n        const promise = Ask.MissingConfigs();\r\n        expect(promise).to.be.an.instanceOf(Promise);\r\n    }\r\n}\r\n"]}