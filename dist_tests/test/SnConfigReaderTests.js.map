{"version":3,"file":"SnConfigReaderTests.js","sourceRoot":"","sources":["../../test/SnConfigReaderTests.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,6BAA6B;AAC7B,uDAA+C;AAC/C,yEAAsE;AAEtE,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAG3B,IAAa,mBAAmB,GAAhC;IAGW,MAAM;QACT,IAAI,CAAC,MAAM,GAAG,IAAI,+BAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACpD,CAAC;IAGM,IAAI;QACP,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QAC7C,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAGM,eAAe;QAClB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QACnF,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAGY,eAAe;;YACxB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;gBACjB,aAAa,EAAE,KAAK;gBACpB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,UAAU;aACvB,CAAC;YACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;YAC7D,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC;KAAA;IAGM,iCAAiC,CAAC,IAAI;QACzC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;YACjB,aAAa,EAAE,EAAE;YACjB,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,UAAU;SACvB,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC;aAChC,IAAI,CAAC;YACF,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAChC,CAAC,CAAC;aACD,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;IAC7B,CAAC;IAGM,kBAAkB;QAErB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;YACjB,aAAa,EAAE,KAAK;YACpB,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,UAAU;SACvB,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;YACvB,aAAa,EAAE,WAAW;SAC7B,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;IACnE,CAAC;CACJ,CAAA;AAnDG;IADC,uBAAI,CAAC,mDAAmD,CAAC;;;;+CAIzD;AAGD;IADC,uBAAI,CAAC,kDAAkD,CAAC;;;;0DAIxD;AAGD;IADC,uBAAI,CAAC,8CAA8C,CAAC;;;;0DASpD;AAGD;IADC,uBAAI,CAAC,qFAAqF,CAAC;;;;4EAY3F;AAGD;IADC,uBAAI,CAAC,+CAA+C,CAAC;;;;6DAcrD;AA1DQ,mBAAmB;IAD/B,wBAAK,CAAC,sBAAsB,CAAC;GACjB,mBAAmB,CA2D/B;AA3DY,kDAAmB","sourcesContent":["import * as Chai from 'chai';\r\nimport { suite, test } from 'mocha-typescript';\r\nimport { SnConfigReader } from '../src/utils/snconfig/snconfigreader';\r\n\r\nconst expect = Chai.expect;\r\n\r\n@suite('SnConfigReader tests')\r\nexport class SnConfigReaderTests {\r\n\r\n    private reader: SnConfigReader;\r\n    public before() {\r\n        this.reader = new SnConfigReader(process.cwd());\r\n    }\r\n\r\n    @test('ReadConfigFile should return an awaitable promise')\r\n    public Read() {\r\n        const promise = this.reader.ReadConfigFile();\r\n        expect(promise).to.be.an.instanceOf(Promise);\r\n    }\r\n\r\n    @test('ValidateAsync should return an awaitable promise')\r\n    public ValidatePromise() {\r\n        const promise = this.reader.ValidateAsync('RepositoryUrl', 'UserName', 'Password');\r\n        expect(promise).to.be.an.instanceOf(Promise);\r\n    }\r\n\r\n    @test('Shouldn resolve when all fields are provided')\r\n    public async ValidateResolve() {\r\n        this.reader.Config = {\r\n            RepositoryUrl: 'url',\r\n            UserName: 'username',\r\n            Password: 'password',\r\n        };\r\n        const cfg = await this.reader.ValidateAsync('RepositoryUrl');\r\n        expect(cfg.RepositoryUrl).to.be.eq('url');\r\n    }\r\n\r\n    @test('Should throw an error if a field is provided but disallowed form config by behavior')\r\n    public ValidateShouldThrowWhenNotAllowed(done) {\r\n        this.reader.Config = {\r\n            RepositoryUrl: '',\r\n            UserName: 'user',\r\n            Password: 'password',\r\n        };\r\n        this.reader.ValidateAsync('Password')\r\n            .then(() => {\r\n                done('Exception expcected');\r\n            })\r\n            .catch(() => done());\r\n    }\r\n\r\n    @test('OverrideConfig should override provided value')\r\n    public OverrideConfigTest() {\r\n\r\n        this.reader.Config = {\r\n            RepositoryUrl: 'url',\r\n            UserName: 'username',\r\n            Password: 'password',\r\n        };\r\n\r\n        expect(this.reader.Config.RepositoryUrl).to.be.eq('url');\r\n        this.reader.OverrideConfig({\r\n            RepositoryUrl: 'localhost'\r\n        });\r\n        expect(this.reader.Config.RepositoryUrl).to.be.eq('localhost');\r\n    }\r\n}\r\n"]}